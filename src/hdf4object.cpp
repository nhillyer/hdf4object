#include "hdf4object.h"

/*
 * Constructor for the hdf4object class. In the event of a file I/O error, the
 * program is terminated.
 */
hdf4object::hdf4object(std::string* filename)
{
	sd_id = SDstart(filename->c_str(), DFACC_READ);
	status = SDfileinfo(sd_id, &n_datasets, &n_file_attrs);
	if (status == -1)
	{
		std::cerr << "FILE I/O FAILURE!" << std::endl;
		exit(EXIT_FAILURE);
	}

	setNames = new std::string[n_datasets];
	setRank = new int[n_datasets];
	setDimensions = new int*[n_datasets];

	for (int i = 0; i < n_datasets; ++i)
	{
		sds_id = SDselect(sd_id, i);
		status = SDgetinfo(sds_id, name, &rank, dim_sizes, &data_type,
					&n_attrs);
		setNames[i] = name;
		setRank[i] = rank;
		setDimensions[i] = new int[rank];

		for (int j = 0; j < rank; ++j)
		{
			setDimensions[i][j] = dim_sizes[j];
		}
	}
}

/*
 * Destructor for the hdf4object.  Closes access to the hdf4object.
 */
hdf4object::~hdf4object()
{
	status = SDendaccess(sds_id);
	status = SDend(sd_id);
	delete [] setNames;
	delete [] setRank;
}

/*
 * Get the names of the data sets stored in the working HDF4 file.
 */
std::string* hdf4object::getDataSets()
{
	return setNames;
}

/*
 * Get the rank (or number of dimensions) for the specified set. Returns -1
 * for nonexistent set.
 */
int hdf4object::getSetRank(std::string* setName)
{
	for (int i = 0; i < n_datasets; ++i)
	{
		if (setNames[i] == *setName)
		{
			return setRank[i];
		}
	}
	return -1;
}

/*
 * Returns the number of sets in the HDF4 file.
 */
int hdf4object::getNumberOfSets()
{
	return n_datasets;
}

/*
 * Returns the dimensions of specified set in the HDF4 file.
 * NOTE: Returns NULL in the event of non-existent set.
 * EXAMPLE: For a set of dimensions 3x7x5, an array of integers will be be
 * returned: {3, 7, 5}.
 */
int* hdf4object::getSetDimensions(std::string* setName)
{
	for (int i = 0; i < n_datasets; ++i)
	{
		if (setNames[i] == *setName)
		{
			return setDimensions[i];
		}
	}
	return NULL;
}

/*
 * Converts the specified set into an array of equivalent dimensions.
 */
void* hdf4object::setToArray(std::string* setName, int n_bytes)
{
	for (int i = 0; i < n_datasets; ++i)
	{
		if (setNames[i] == *setName)
		{
			sds_id = SDselect(sd_id, i);
			int32 start[setRank[i]], edges[setRank[i]];
			std::cerr << "BEFORE INIT MALLOC" << std::endl;

			/*int **array = (int **)malloc(setDimensions[i][0] * sizeof(int *));
			array[0] = (int *)malloc(setDimensions[i][0] * setDimensions[i][1] * n_bytes);
			for (int j = 1; j < setDimensions[i][0]; ++j)
			{
				array[j] = array[0] + j * setDimensions[i][1];
			}
			std::cerr << sizeof(**array) << std::endl;
			*/
			void *array = (void *)malloc(setDimensions[i][0] * setDimensions[i][1] * n_bytes);
			std::cerr << "BEFORE DATA PULL" << std::endl;
			start[0] = 0; start[1] = 0;
			edges[0] = setDimensions[i][0]; edges[1] = setDimensions[i][1];
			std::cerr << array << std::endl;
			status = SDreaddata(sds_id, start, NULL, edges, (void *) array);
			std::cerr << "AFTER DATA PULL" << std::endl;
			std::getchar();
			return (void**)array;
		}
	}
	return NULL;
}

/*
 * Free the array generated by setToArray().
 */
void hdf4object::freeArray(void* array, int n_bytes)
{
	//for (int i = 0; i < sizeof(array) / sizeof(int *); ++i)
	//{
	//	free(array);
	//}
	free(array);	
}

